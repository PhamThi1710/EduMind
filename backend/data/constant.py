expectedHeaders = ["Course ID", "Course Name", "Credit", "Semester", "Professor Email", "Student Email List"]

progress_tracking_test_student = [
    {
        "id": "1",
        "name": "student1",
        "email": "student1@example.com",
        "password": "password123",
        "avatar_url": "https://www.example.com/avatar1.png",
        "mssv": "2012345678",
        "date_of_birth": "1999-05-15",
        "fullname": "Alice Smith",
        "is_email_verified": True,
        "verification_code": "ABC123",
        "verification_code_expires_at": "2025-12-31",
        "password_reset_code": "XYZ789",
        "password_reset_code_expires_at": "2025-12-31",
        "is_active": True,
    },
    {
        "id": "2",
        "name": "student2",
        "email": "student2@example.com",
        "password": "password123",
        "avatar_url": "https://www.example.com/avatar2.png",
        "mssv": "2012345679",
        "date_of_birth": "1999-08-25",
        "fullname": "Bob Johnson",
        "is_email_verified": True,
        "verification_code": "DEF456",
        "verification_code_expires_at": "2025-12-31",
        "password_reset_code": "LMN012",
        "password_reset_code_expires_at": "2025-12-31",
        "is_active": True,
    },
]

progress_tracking_test_course = [
    {
        "id": "1",
        "name": "Discrete Structures for Computing",
        "professor_id": "1",
        "learning_outcomes": ["Understand set theory", "Learn graph theory", "Explore combinatorics"],
        "start_date": "2024-09-01",
        "end_date": "2024-12-15",
        "status": "ongoing",
        "image_url": "https://www.example.com/course1.png",
        "nCredit": 3,
        "nSemester": 1,
        "courseID": "CS101",
        "createdByAdminID": "1",
    },
    {
        "id": "2",
        "name": "Introduction to Computing",
        "professor_id": "2",
        "learning_outcomes": [
            "Learn basic programming concepts",
            "Understand computer architecture",
            "Introduction to algorithms",
        ],
        "start_date": "2024-09-01",
        "end_date": "2024-12-15",
        "status": "ongoing",
        "image_url": "https://www.example.com/course2.png",
        "nCredit": 3,
        "nSemester": 1,
        "courseID": "CS102",
        "createdByAdminID": "1",
    },
]

progress_tracking_test_student_course = [
    {
        "id": "1",
        "student_id": "1",
        "course_id": "1",
        "last_accessed": "2025-01-15",
        "completed_lessons": 3,
        "time_spent": "10:15:45",
        "assignments_done": 2,
    },
    {
        "id": "2",
        "student_id": "2",
        "course_id": "2",
        "last_accessed": "2025-01-15",
        "completed_lessons": 2,
        "time_spent": "08:30:22",
        "assignments_done": 1,
    },
    {
        "id": "3",
        "student_id": "1",
        "course_id": "2",
        "last_accessed": "2025-01-15",
        "completed_lessons": 2,
        "time_spent": "08:30:22",
        "assignments_done": 1,
    },
    {
        "id": "4",
        "student_id": "2",
        "course_id": "1",
        "last_accessed": "2025-01-15",
        "completed_lessons": 3,
        "time_spent": "10:15:45",
        "assignments_done": 2,
    },
]

progress_tracking_test_course_lesson = [
    {
        "id": "1",
        "course_id": "1",
        "title": "Lesson 1: Set Theory Basics",
        "description": "Introduction to set theory and basic set operations.",
        "order": 1,
        "learning_outcomes": ["Understand sets and subsets", "Learn set operations"],
    },
    {
        "id": "2",
        "course_id": "1",
        "title": "Lesson 2: Graph Theory",
        "description": "Introduction to graphs, vertices, and edges.",
        "order": 2,
        "learning_outcomes": ["Understand graph terminology", "Learn types of graphs"],
    },
    {
        "id": "3",
        "course_id": "1",
        "title": "Lesson 3: Combinatorics",
        "description": "Learn about combinations, permutations, and basic counting principles.",
        "order": 3,
        "learning_outcomes": ["Understand permutations", "Learn combinations"],
    },
    {
        "id": "4",
        "course_id": "1",
        "title": "Lesson 4: Probability Theory",
        "description": "Introduction to probability, events, and outcomes.",
        "order": 4,
        "learning_outcomes": ["Understand basic probability", "Learn probability rules"],
    },
    {
        "id": "5",
        "course_id": "1",
        "title": "Lesson 5: Recursion and Induction",
        "description": "Learn recursive methods and mathematical induction techniques.",
        "order": 5,
        "learning_outcomes": ["Understand recursion", "Learn mathematical induction"],
    },
    {
        "id": "6",
        "course_id": "2",
        "title": "Lesson 1: Introduction to Programming",
        "description": "Introduction to programming concepts using Python.",
        "order": 1,
        "learning_outcomes": ["Understand variables and data types", "Write basic Python programs"],
    },
    {
        "id": "7",
        "course_id": "2",
        "title": "Lesson 2: Computer Architecture",
        "description": "Basic introduction to computer components and architecture.",
        "order": 2,
        "learning_outcomes": ["Understand CPU, memory, and I/O", "Learn about instruction cycles"],
    },
    {
        "id": "8",
        "course_id": "2",
        "title": "Lesson 3: Introduction to Algorithms",
        "description": "Overview of basic algorithms like sorting and searching.",
        "order": 3,
        "learning_outcomes": ["Understand sorting algorithms", "Learn searching algorithms"],
    },
    {
        "id": "9",
        "course_id": "2",
        "title": "Lesson 4: Data Structures",
        "description": "Introduction to basic data structures such as lists, stacks, and queues.",
        "order": 4,
        "learning_outcomes": ["Understand data structures", "Learn how to implement lists, stacks, and queues"],
    },
    {
        "id": "10",
        "course_id": "2",
        "title": "Lesson 5: Software Development Basics",
        "description": "Introduction to software development lifecycle and best practices.",
        "order": 5,
        "learning_outcomes": ["Understand software development process", "Learn about version control and debugging"],
    },
]

progress_tracking_test_learning_path = [
    {
        "id": "1",
        "start_date": "2024-09-01",
        "end_date": "2024-12-15",
        "objective": "Gain a solid understanding of set theory and operations, and apply them to problem-solving",
        "progress": 56,
        "student_id": "1",
        "course_id": "1",
    },
    {
        "id": "2",
        "start_date": "2024-09-01",
        "end_date": "2024-12-15",
        "objective": "Develop the ability to write basic Python programs and understand fundamental programming concepts",
        "progress": 86,
        "student_id": "2",
        "course_id": "2",
    },
    {
        "id": "3",
        "start_date": "2024-09-01",
        "end_date": "2024-12-15",
        "objective": "Build a strong foundation in graph theory and be able to analyze and solve problems using graph models",
        "progress": 64,
        "student_id": "1",
        "course_id": "2",
    },
    {
        "id": "4",
        "start_date": "2024-09-01",
        "end_date": "2024-12-15",
        "objective": "Understand and apply probability rules to analyze events and make informed predictions",
        "progress": 30,
        "student_id": "2",
        "course_id": "1",
    },
]


progress_tracking_test_recommend_lessons = [
    {
        "id": "1",
        "learning_path_id": "1",
        "lesson_id": "1",
        "progress": 89,
        "recommended_content": "Set theory basics, Learn set operations like union, intersection, and difference.",
        "explain": "This lesson will introduce you to the fundamental operations in set theory, which are essential for understanding discrete structures.",
        "status": "new",
    },
    {
        "id": "2",
        "learning_path_id": "1",
        "lesson_id": "3",
        "progress": 45,
        "recommended_content": "Combinatorics and counting principles, including permutations and combinations.",
        "explain": "In this lesson, you'll learn about the fundamental principles of counting, which are important for solving problems in graph theory and algorithms.",
        "status": "new",
    },
    {
        "id": "3",
        "learning_path_id": "2",
        "lesson_id": "6",
        "progress": 34,
        "recommended_content": "Introduction to Python programming, focusing on variables, data types, and basic syntax.",
        "explain": "This lesson provides an overview of Python programming, which is essential for building a strong foundation in computer science.",
        "status": "new",
    },
    {
        "id": "4",
        "learning_path_id": "2",
        "lesson_id": "8",
        "progress": 56,
        "recommended_content": "Computer architecture fundamentals, including CPU, memory, and input/output systems.",
        "explain": "In this lesson, you'll learn about the core components of a computer system and how they interact with each other.",
        "status": "new",
    },
]


progress_tracking_test_modules = [
    {
        "id": "1",
        "recommend_lesson_id": "1",
        "title": "Module 1: Set Theory Basics",
        "objectives": [
            "Understand sets and subsets",
            "Learn set operations such as union, intersection, and difference",
        ],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "2",
        "recommend_lesson_id": "1",
        "title": "Module 2: Set Operations",
        "objectives": ["Master set operations", "Apply set theory in problem-solving"],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "3",
        "recommend_lesson_id": "1",
        "title": "Module 3: Applications of Set Theory",
        "objectives": [
            "Explore applications of set theory in computing",
            "Solve problems involving sets and relations",
        ],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "4",
        "recommend_lesson_id": "2",
        "title": "Module 1: Introduction to Graph Theory",
        "objectives": ["Understand graph terminology", "Learn types of graphs and their representations"],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "5",
        "recommend_lesson_id": "2",
        "title": "Module 2: Graph Operations and Algorithms",
        "objectives": ["Learn graph traversal algorithms", "Understand graph algorithms like BFS and DFS"],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "6",
        "recommend_lesson_id": "2",
        "title": "Module 3: Advanced Graph Theory",
        "objectives": [
            "Learn advanced concepts in graph theory",
            "Apply graph algorithms to solve real-world problems",
        ],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "7",
        "recommend_lesson_id": "3",
        "title": "Module 1: Introduction to Python Programming",
        "objectives": ["Learn Python syntax", "Understand basic programming concepts like variables and data types"],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "8",
        "recommend_lesson_id": "3",
        "title": "Module 2: Control Structures in Python",
        "objectives": ["Learn about conditional statements", "Understand loops and iterations in Python"],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "9",
        "recommend_lesson_id": "3",
        "title": "Module 3: Functions and Error Handling in Python",
        "objectives": ["Learn how to define and call functions", "Understand error handling using try/except"],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "10",
        "recommend_lesson_id": "4",
        "title": "Module 1: Introduction to Computer Architecture",
        "objectives": ["Understand basic computer components", "Learn how CPU, memory, and I/O interact"],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "11",
        "recommend_lesson_id": "4",
        "title": "Module 2: Understanding CPU and Memory",
        "objectives": ["Learn the function of the CPU", "Understand how memory is organized and accessed"],
        "last_accessed": "2025-01-15",
    },
    {
        "id": "12",
        "recommend_lesson_id": "4",
        "title": "Module 3: Input/Output and Storage Systems",
        "objectives": ["Understand I/O operations", "Learn about storage systems in computers"],
        "last_accessed": "2025-01-15",
    },
]

progress_tracking_test_quiz_exercises = [
    {
        "id": "1",
        "module_id": "1",
        "name": "Quiz 1: Basic Set Theory",
        "status": "new",
        "difficulty": "easy",
        "score": 9,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the union of sets A = {1, 2} and B = {2, 3}?",
                "answers": ["{1, 2}", "{1, 2, 3}", "{2, 3}", "{1, 3}"],
                "correct_answer": "{1, 2, 3}",
                "explanation": "Union combines all elements from both sets.",
            },
            {
                "question": "Which of the following is a subset of {1, 2, 3}?",
                "answers": ["{1, 2}", "{4, 5}", "{2, 3, 4}", "{1, 3}"],
                "correct_answer": "{1, 2}",
                "explanation": "A subset contains only elements from the original set.",
            },
            {
                "question": "What is the intersection of sets A = {1, 2, 3} and B = {2, 3, 4}?",
                "answers": ["{1, 2}", "{2, 3}", "{1, 4}", "{3, 4}"],
                "correct_answer": "{2, 3}",
                "explanation": "Intersection consists of elements common to both sets.",
            },
            {
                "question": "Which of the following is the complement of A = {1, 2} in the universal set U = {1, 2, 3, 4}?",
                "answers": ["{3, 4}", "{1, 2}", "{2, 3}", "{4}"],
                "correct_answer": "{3, 4}",
                "explanation": "Complement includes elements not in the set A.",
            },
        ],
    },
    {
        "id": "2",
        "module_id": "1",
        "name": "Quiz 2: Set Operations",
        "status": "new",
        "difficulty": "easy",
        "score": 5,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the difference between sets A = {1, 2, 3} and B = {2, 3, 4}?",
                "answers": ["{1}", "{2, 3}", "{4}", "{1, 4}"],
                "correct_answer": "{1}",
                "explanation": "Difference gives elements in A but not in B.",
            },
            {
                "question": "Which of the following sets are disjoint?",
                "answers": ["{1, 2}, {3, 4}", "{1, 2}, {2, 3}", "{4, 5}, {4, 6}", "{7, 8}, {7, 9}"],
                "correct_answer": "{1, 2}, {3, 4}",
                "explanation": "Disjoint sets have no common elements.",
            },
            {
                "question": "Which of the following operations is associative?",
                "answers": ["Union", "Intersection", "Difference", "Subset"],
                "correct_answer": "Union",
                "explanation": "Union is an associative operation in set theory.",
            },
            {
                "question": "What is the power set of {1, 2}?",
                "answers": ["{{1}, {2}}", "{ {}, {1}, {2}, {1, 2} }", "{{1, 2}}", "{}"],
                "correct_answer": "{ {}, {1}, {2}, {1, 2} }",
                "explanation": "The power set contains all subsets of a set.",
            },
        ],
    },
    {
        "id": "3",
        "module_id": "2",
        "name": "Quiz 1: Introduction to Graph Theory",
        "status": "new",
        "difficulty": "easy",
        "score": 9,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the degree of a vertex in a graph?",
                "answers": [
                    "The number of edges connected to the vertex",
                    "The number of vertices in the graph",
                    "The distance to other vertices",
                    "The total number of edges",
                ],
                "correct_answer": "The number of edges connected to the vertex",
                "explanation": "The degree of a vertex is the number of edges incident to it.",
            },
            {
                "question": "Which type of graph has no loops and no multiple edges?",
                "answers": ["Simple graph", "Complete graph", "Cyclic graph", "Connected graph"],
                "correct_answer": "Simple graph",
                "explanation": "A simple graph has no loops or multiple edges.",
            },
            {
                "question": "What does BFS stand for in graph traversal?",
                "answers": [
                    "Breadth First Search",
                    "Binary Field Search",
                    "Best First Search",
                    "Breadth First Sorting",
                ],
                "correct_answer": "Breadth First Search",
                "explanation": "BFS is an algorithm for searching a graph or tree in breadth-first order.",
            },
            {
                "question": "Which of the following is true about a complete graph?",
                "answers": [
                    "Every vertex is connected to every other vertex",
                    "It has no edges",
                    "It has no vertices",
                    "It is always disconnected",
                ],
                "correct_answer": "Every vertex is connected to every other vertex",
                "explanation": "A complete graph has edges between all pairs of vertices.",
            },
        ],
    },
    {
        "id": "4",
        "module_id": "2",
        "name": "Quiz 2: Graph Operations and Algorithms",
        "status": "new",
        "difficulty": "easy",
        "score": 6,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What does DFS stand for in graph traversal?",
                "answers": [
                    "Depth First Search",
                    "Directed Flow Search",
                    "Distance First Search",
                    "Depth Field Search",
                ],
                "correct_answer": "Depth First Search",
                "explanation": "DFS is an algorithm for searching a graph or tree in depth-first order.",
            },
            {
                "question": "Which of the following is true about a directed graph?",
                "answers": [
                    "Edges have a direction",
                    "Edges are undirected",
                    "It has no edges",
                    "It is a simple graph",
                ],
                "correct_answer": "Edges have a direction",
                "explanation": "In a directed graph, edges have a specific direction.",
            },
            {
                "question": "What is a tree in graph theory?",
                "answers": [
                    "A connected acyclic graph",
                    "A disconnected graph",
                    "A cyclic graph",
                    "A graph with only one vertex",
                ],
                "correct_answer": "A connected acyclic graph",
                "explanation": "A tree is a connected graph with no cycles.",
            },
            {
                "question": "Which algorithm is used to find the shortest path in a weighted graph?",
                "answers": ["Dijkstra's algorithm", "BFS", "DFS", "Kruskal's algorithm"],
                "correct_answer": "Dijkstra's algorithm",
                "explanation": "Dijkstra's algorithm finds the shortest path in a weighted graph.",
            },
        ],
    },
    {
        "id": "5",
        "module_id": "3",
        "name": "Quiz 1: Introduction to Python Programming",
        "status": "new",
        "difficulty": "easy",
        "score": 7.9,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the correct syntax to output 'Hello World' in Python?",
                "answers": ["echo 'Hello World'", "print('Hello World')", "echo('Hello World')", "print Hello World"],
                "correct_answer": "print('Hello World')",
                "explanation": "In Python, 'print' is used to display output.",
            },
            {
                "question": "Which of the following is a valid variable name in Python?",
                "answers": ["1variable", "_variable", "$variable", "variable$"],
                "correct_answer": "_variable",
                "explanation": "Variable names must start with a letter or underscore.",
            },
            {
                "question": "Which data type is used for whole numbers in Python?",
                "answers": ["int", "float", "str", "list"],
                "correct_answer": "int",
                "explanation": "The 'int' data type is used for integers in Python.",
            },
            {
                "question": "What will be the output of the following Python code: print(2 + 3 * 4)?",
                "answers": ["14", "20", "10", "12"],
                "correct_answer": "14",
                "explanation": "Python follows the order of operations: multiplication first.",
            },
        ],
    },
    {
        "id": "6",
        "module_id": "3",
        "name": "Quiz 2: Python Functions and Loops",
        "status": "new",
        "difficulty": "easy",
        "score": 4.3,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following is the correct syntax for a Python function?",
                "answers": [
                    "def function_name:",
                    "def function_name[]:",
                    "function function_name():",
                    "function_name def():",
                ],
                "correct_answer": "def function_name:",
                "explanation": "In Python, functions are defined using the 'def' keyword.",
            },
            {
                "question": "What will be the output of the following Python code: for i in range(3): print(i)?",
                "answers": ["0, 1, 2", "1, 2, 3", "0, 1", "0, 1, 2, 3"],
                "correct_answer": "0, 1, 2",
                "explanation": "The range function generates numbers from 0 to 2 (excluding 3).",
            },
            {
                "question": "What is the output of the following Python code: x = 10; print(x % 3)?",
                "answers": ["1", "2", "3", "0"],
                "correct_answer": "1",
                "explanation": "The '%' operator calculates the remainder when dividing 10 by 3.",
            },
            {
                "question": "Which of the following loops will run indefinitely?",
                "answers": [
                    "for i in range(10):",
                    "while True:",
                    "for i in range(10): print(i)",
                    "for i in [1, 2, 3]:",
                ],
                "correct_answer": "while True:",
                "explanation": "A 'while True' loop runs indefinitely unless stopped explicitly.",
            },
        ],
    },
    {
        "id": "7",
        "module_id": "4",
        "name": "Quiz 1: Advanced Graph Theory",
        "status": "new",
        "difficulty": "medium",
        "score": 10,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following algorithms is used to find the minimum spanning tree of a graph?",
                "answers": [
                    "Kruskal's algorithm",
                    "Dijkstra's algorithm",
                    "Prim's algorithm",
                    "Bellman-Ford algorithm",
                ],
                "correct_answer": "Kruskal's algorithm",
                "explanation": "Kruskal's algorithm is used to find the minimum spanning tree of a graph.",
            },
            {
                "question": "In a directed graph, what is the outdegree of a vertex?",
                "answers": [
                    "The number of vertices connected to the vertex",
                    "The number of edges leading from the vertex",
                    "The number of edges leading into the vertex",
                    "The number of self-loops at the vertex",
                ],
                "correct_answer": "The number of edges leading from the vertex",
                "explanation": "Outdegree refers to the number of edges leaving a vertex in a directed graph.",
            },
            {
                "question": "What is a Eulerian circuit in graph theory?",
                "answers": [
                    "A circuit that visits every edge exactly once",
                    "A path that visits every vertex exactly once",
                    "A circuit that starts and ends at the same vertex",
                    "A path that can repeat edges",
                ],
                "correct_answer": "A circuit that visits every edge exactly once",
                "explanation": "An Eulerian circuit visits each edge exactly once and returns to the starting point.",
            },
            {
                "question": "Which of the following is the time complexity of Dijkstra's algorithm with a priority queue?",
                "answers": ["O(V + E)", "O(V log V)", "O(E log V)", "O(V^2)"],
                "correct_answer": "O(E log V)",
                "explanation": "Dijkstra's algorithm using a priority queue has a time complexity of O(E log V), where E is the number of edges and V is the number of vertices.",
            },
        ],
    },
    {
        "id": "8",
        "module_id": "4",
        "name": "Quiz 2: Graph Algorithms and Applications",
        "status": "new",
        "difficulty": "medium",
        "score": 9.7,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following problems can be solved using a graph?",
                "answers": ["Shortest path finding", "Social network analysis", "Web crawling", "All of the above"],
                "correct_answer": "All of the above",
                "explanation": "Graphs are used in various applications such as finding the shortest path, analyzing social networks, and crawling the web.",
            },
            {
                "question": "What is the primary difference between BFS and DFS?",
                "answers": [
                    "BFS explores level by level, DFS explores deeply",
                    "BFS uses a stack, DFS uses a queue",
                    "BFS is slower than DFS",
                    "DFS finds the shortest path, BFS does not",
                ],
                "correct_answer": "BFS explores level by level, DFS explores deeply",
                "explanation": "BFS uses a queue and explores all neighbors at a level before moving deeper, while DFS uses a stack and explores as deeply as possible before backtracking.",
            },
            {
                "question": "What is a bipartite graph?",
                "answers": [
                    "A graph with two sets of vertices, where every edge connects a vertex from one set to a vertex from the other set",
                    "A graph with only two vertices",
                    "A graph with two cycles",
                    "A graph with no edges",
                ],
                "correct_answer": "A graph with two sets of vertices, where every edge connects a vertex from one set to a vertex from the other set",
                "explanation": "A bipartite graph is a graph whose vertices can be divided into two disjoint sets such that every edge connects a vertex from one set to a vertex from the other.",
            },
            {
                "question": "Which algorithm is used to detect cycles in a directed graph?",
                "answers": [
                    "Depth First Search (DFS)",
                    "Breadth First Search (BFS)",
                    "Kruskal's algorithm",
                    "Bellman-Ford algorithm",
                ],
                "correct_answer": "Depth First Search (DFS)",
                "explanation": "DFS can be used to detect cycles in a directed graph by checking for back edges.",
            },
        ],
    },
    {
        "id": "9",
        "module_id": "5",
        "name": "Quiz 1: Introduction to Data Structures",
        "status": "new",
        "difficulty": "easy",
        "score": 3.9,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which data structure uses LIFO (Last In First Out) order?",
                "answers": ["Queue", "Stack", "Array", "Linked list"],
                "correct_answer": "Stack",
                "explanation": "A stack uses LIFO order, where the last element added is the first one to be removed.",
            },
            {
                "question": "Which data structure uses FIFO (First In First Out) order?",
                "answers": ["Stack", "Queue", "Linked list", "Tree"],
                "correct_answer": "Queue",
                "explanation": "A queue uses FIFO order, where the first element added is the first one to be removed.",
            },
            {
                "question": "Which of the following is an example of a linear data structure?",
                "answers": ["Array", "Tree", "Graph", "Hash table"],
                "correct_answer": "Array",
                "explanation": "An array is a linear data structure, meaning its elements are stored sequentially.",
            },
            {
                "question": "Which of the following is an example of a non-linear data structure?",
                "answers": ["Array", "Linked list", "Tree", "Queue"],
                "correct_answer": "Tree",
                "explanation": "A tree is a non-linear data structure, as its elements are organized hierarchically, not sequentially.",
            },
        ],
    },
    {
        "id": "10",
        "module_id": "5",
        "name": "Quiz 2: Data Structures and Algorithms",
        "status": "new",
        "difficulty": "medium",
        "score": 4.9,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following operations has the best time complexity in a hash table?",
                "answers": ["Search", "Insert", "Delete", "All of the above"],
                "correct_answer": "All of the above",
                "explanation": "In a hash table, search, insert, and delete operations have an average time complexity of O(1).",
            },
            {
                "question": "What is the time complexity of searching in a binary search tree (BST)?",
                "answers": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
                "correct_answer": "O(log n)",
                "explanation": "In a balanced binary search tree, search has a time complexity of O(log n).",
            },
            {
                "question": "Which of the following sorting algorithms has the worst-case time complexity of O(n^2)?",
                "answers": ["Quick sort", "Merge sort", "Bubble sort", "Heap sort"],
                "correct_answer": "Bubble sort",
                "explanation": "Bubble sort has a worst-case time complexity of O(n^2).",
            },
            {
                "question": "Which data structure is used in a breadth-first search (BFS) algorithm?",
                "answers": ["Stack", "Queue", "Linked list", "Tree"],
                "correct_answer": "Queue",
                "explanation": "BFS uses a queue to explore vertices level by level.",
            },
        ],
    },
    {
        "id": "11",
        "module_id": "6",
        "name": "Discrete Structures: Sets and Relations - Quiz 1",
        "status": "new",
        "difficulty": "easy",
        "score": 8.9,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following is a valid set notation?",
                "answers": ["{1, 2, 3}", "[1, 2, 3]", "1, 2, 3", "(1, 2, 3)"],
                "correct_answer": "{1, 2, 3}",
                "explanation": "Sets are denoted by curly brackets {}.",
            },
            {
                "question": "Which of the following represents the power set of {a, b}?",
                "answers": ["{{a}, {b}}", "{a, b}", "{∅, {a}, {b}, {a, b}}", "{a, b, ∅}"],
                "correct_answer": "{∅, {a}, {b}, {a, b}}",
                "explanation": "The power set of a set contains all subsets, including the empty set and the set itself.",
            },
            {
                "question": "What does the intersection of two sets A = {1, 2, 3} and B = {2, 3, 4} result in?",
                "answers": ["{1, 2, 3, 4}", "{2, 3}", "{1, 4}", "{2}"],
                "correct_answer": "{2, 3}",
                "explanation": "The intersection of sets A and B contains only the elements common to both sets.",
            },
            {
                "question": "Which of the following is a reflexive relation?",
                "answers": [
                    "{(1, 1), (2, 2), (3, 3)}",
                    "{(1, 2), (2, 3), (3, 1)}",
                    "{(1, 2), (2, 3)}",
                    "{(1, 3), (2, 2)}",
                ],
                "correct_answer": "{(1, 1), (2, 2), (3, 3)}",
                "explanation": "A reflexive relation must include all pairs (x, x) for every element x in the set.",
            },
        ],
    },
    {
        "id": "12",
        "module_id": "6",
        "name": "Discrete Structures: Sets and Relations - Quiz 2",
        "status": "new",
        "difficulty": "medium",
        "score": 6.4,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following sets is infinite?",
                "answers": ["{1, 2, 3, 4}", "{x | x is a prime number}", "{1, 2, 3, 4, 5}", "{a, b, c}"],
                "correct_answer": "{x | x is a prime number}",
                "explanation": "The set of prime numbers is infinite, as there are infinitely many primes.",
            },
            {
                "question": "What is the union of the sets A = {1, 2, 3} and B = {3, 4, 5}?",
                "answers": ["{1, 2, 3, 4, 5}", "{3, 4, 5}", "{1, 2}", "{1, 2, 3}"],
                "correct_answer": "{1, 2, 3, 4, 5}",
                "explanation": "The union of two sets includes all elements from both sets, without duplication.",
            },
            {
                "question": "If a relation R on a set is symmetric, which of the following must be true?",
                "answers": [
                    "If (x, y) ∈ R, then (y, x) ∈ R",
                    "If (x, y) ∈ R, then (y, x) ∉ R",
                    "If (x, y) ∈ R, then x ≠ y",
                    "If (x, y) ∉ R, then (y, x) ∉ R",
                ],
                "correct_answer": "If (x, y) ∈ R, then (y, x) ∈ R",
                "explanation": "A symmetric relation means that if (x, y) is in the relation, then (y, x) must also be in the relation.",
            },
            {
                "question": "Which of the following is a valid subset of the set A = {1, 2, 3}?",
                "answers": ["{2, 4}", "{1, 3}", "{1, 2, 3, 4}", "∅"],
                "correct_answer": "∅",
                "explanation": "The empty set ∅ is always a valid subset of any set.",
            },
        ],
    },
    {
        "id": "13",
        "module_id": "7",
        "name": "Discrete Structures: Functions and Graphs - Quiz 1",
        "status": "new",
        "difficulty": "easy",
        "score": 1.8,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following is a function?",
                "answers": [
                    "{(1, 2), (2, 3), (3, 4)}",
                    "{(1, 2), (2, 3), (2, 4)}",
                    "{(1, 2), (1, 3), (2, 4)}",
                    "{(1, 2), (1, 3), (2, 2)}",
                ],
                "correct_answer": "{(1, 2), (2, 3), (3, 4)}",
                "explanation": "A function must map each input to exactly one output, so each input appears only once in the relation.",
            },
            {
                "question": "What does a directed graph represent?",
                "answers": [
                    "A set of elements and relations between them",
                    "A set of elements with bidirectional connections",
                    "A set of unconnected elements",
                    "A set of elements with no edges",
                ],
                "correct_answer": "A set of elements and relations between them",
                "explanation": "A directed graph consists of vertices and edges where edges have a direction from one vertex to another.",
            },
            {
                "question": "Which of the following is a property of a tree?",
                "answers": ["It has cycles", "It is a directed graph", "It is acyclic", "It has a root node only"],
                "correct_answer": "It is acyclic",
                "explanation": "A tree is a connected graph with no cycles.",
            },
            {
                "question": "What is the degree of a vertex in a graph?",
                "answers": [
                    "The number of edges incident to the vertex",
                    "The number of vertices connected to the vertex",
                    "The number of loops at the vertex",
                    "The number of paths starting from the vertex",
                ],
                "correct_answer": "The number of edges incident to the vertex",
                "explanation": "The degree of a vertex is defined as the number of edges that are connected to it.",
            },
        ],
    },
    {
        "id": "14",
        "module_id": "7",
        "name": "Discrete Structures: Functions and Graphs - Quiz 2",
        "status": "new",
        "difficulty": "medium",
        "score": 6.7,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following is a bijection?",
                "answers": [
                    "{(1, 2), (2, 3), (3, 4)}",
                    "{(1, 2), (2, 3), (3, 3)}",
                    "{(1, 2), (2, 3), (1, 4)}",
                    "{(1, 2), (2, 4), (3, 5)}",
                ],
                "correct_answer": "{(1, 2), (2, 3), (3, 4)}",
                "explanation": "A bijection is a function that is both injective (one-to-one) and surjective (onto).",
            },
            {
                "question": "What does the adjacency matrix of a graph represent?",
                "answers": [
                    "A list of all the edges",
                    "A matrix that shows which vertices are adjacent to each other",
                    "A list of all the vertices",
                    "A set of all possible edge weights",
                ],
                "correct_answer": "A matrix that shows which vertices are adjacent to each other",
                "explanation": "The adjacency matrix of a graph is a square matrix used to represent a graph, with rows and columns representing vertices, and entries indicating the presence of edges.",
            },
            {
                "question": "In a directed graph, if there is a directed edge from vertex A to vertex B, which of the following is true?",
                "answers": [
                    "A is the source, B is the destination",
                    "B is the source, A is the destination",
                    "A and B are both sources",
                    "A and B are both destinations",
                ],
                "correct_answer": "A is the source, B is the destination",
                "explanation": "In a directed graph, edges have direction, with a source vertex and a destination vertex.",
            },
            {
                "question": "Which of the following statements is true about a tree?",
                "answers": [
                    "A tree has exactly one cycle",
                    "A tree has no cycles",
                    "A tree can have more than one root",
                    "A tree is a directed graph",
                ],
                "correct_answer": "A tree has no cycles",
                "explanation": "A tree is an acyclic, connected graph with one root node and no cycles.",
            },
        ],
    },
    {
        "id": "15",
        "module_id": "8",
        "name": "Introduction to Computing: Algorithms and Complexity - Quiz 1",
        "status": "new",
        "difficulty": "easy",
        "score": 8.6,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following best defines an algorithm?",
                "answers": [
                    "A step-by-step procedure to solve a problem",
                    "A random set of instructions",
                    "A list of problems to solve",
                    "A type of data structure",
                ],
                "correct_answer": "A step-by-step procedure to solve a problem",
                "explanation": "An algorithm is a finite sequence of well-defined instructions to solve a problem.",
            },
            {
                "question": "Which of the following is an example of a divide-and-conquer algorithm?",
                "answers": ["Merge Sort", "Linear Search", "Bubble Sort", "Insertion Sort"],
                "correct_answer": "Merge Sort",
                "explanation": "Merge Sort is a divide-and-conquer algorithm that divides the array into halves, recursively sorts them, and then merges the results.",
            },
            {
                "question": "What does the time complexity of O(n) imply?",
                "answers": [
                    "The algorithm's running time grows quadratically with the input size",
                    "The algorithm's running time is constant",
                    "The algorithm's running time grows linearly with the input size",
                    "The algorithm's running time grows exponentially with the input size",
                ],
                "correct_answer": "The algorithm's running time grows linearly with the input size",
                "explanation": "O(n) time complexity indicates that the algorithm's execution time increases linearly with the size of the input.",
            },
            {
                "question": "Which of the following sorting algorithms has the best time complexity in the average case?",
                "answers": ["Bubble Sort", "Merge Sort", "Selection Sort", "Quick Sort"],
                "correct_answer": "Quick Sort",
                "explanation": "Quick Sort has an average-case time complexity of O(n log n), which is more efficient than bubble or selection sort (O(n^2)) in most cases.",
            },
        ],
    },
    {
        "id": "16",
        "module_id": "8",
        "name": "Introduction to Computing: Algorithms and Complexity - Quiz 2",
        "status": "new",
        "difficulty": "medium",
        "score": 3.8,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the worst-case time complexity of Bubble Sort?",
                "answers": ["O(n log n)", "O(n^2)", "O(n)", "O(log n)"],
                "correct_answer": "O(n^2)",
                "explanation": "Bubble Sort has a worst-case time complexity of O(n^2), which happens when the elements are in reverse order.",
            },
            {
                "question": "Which of the following best describes a greedy algorithm?",
                "answers": [
                    "An algorithm that makes the best possible decision at each step",
                    "An algorithm that explores all possible solutions",
                    "An algorithm that splits the problem into smaller subproblems",
                    "An algorithm that uses dynamic programming",
                ],
                "correct_answer": "An algorithm that makes the best possible decision at each step",
                "explanation": "A greedy algorithm makes the locally optimal choice at each stage, hoping that these local solutions lead to a global optimum.",
            },
            {
                "question": "Which of the following is a non-comparison based sorting algorithm?",
                "answers": ["Quick Sort", "Heap Sort", "Radix Sort", "Merge Sort"],
                "correct_answer": "Radix Sort",
                "explanation": "Radix Sort is a non-comparison based sorting algorithm that sorts numbers digit by digit.",
            },
            {
                "question": "What is the space complexity of Merge Sort?",
                "answers": ["O(n)", "O(log n)", "O(n^2)", "O(1)"],
                "correct_answer": "O(n)",
                "explanation": "Merge Sort requires O(n) extra space for the temporary arrays used during the merge step.",
            },
        ],
    },
    {
        "id": "17",
        "module_id": "9",
        "name": "Introduction to Computing: Data Structures - Quiz 1",
        "status": "new",
        "difficulty": "easy",
        "score": 4.5,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What type of data structure is used to implement a stack?",
                "answers": ["Array", "Linked List", "Tree", "Hash Table"],
                "correct_answer": "Array",
                "explanation": "A stack can be implemented using an array or a linked list. It follows the Last In, First Out (LIFO) principle.",
            },
            {
                "question": "Which operation is not typically associated with a queue?",
                "answers": ["Push", "Enqueue", "Dequeue", "Front"],
                "correct_answer": "Push",
                "explanation": "In a queue, the typical operations are enqueue (add an element) and dequeue (remove an element). Push is used in a stack.",
            },
            {
                "question": "Which of the following is an example of a balanced binary tree?",
                "answers": ["Binary Search Tree", "AVL Tree", "Heap", "Red-Black Tree"],
                "correct_answer": "AVL Tree",
                "explanation": "An AVL Tree is a self-balancing binary search tree where the difference between the heights of left and right subtrees is at most one.",
            },
            {
                "question": "What does a hash table use to retrieve data efficiently?",
                "answers": ["Array", "Hash Function", "Linked List", "Queue"],
                "correct_answer": "Hash Function",
                "explanation": "A hash table uses a hash function to map data to a fixed-size array, enabling efficient retrieval.",
            },
        ],
    },
    {
        "id": "18",
        "module_id": "9",
        "name": "Introduction to Computing: Data Structures - Quiz 2",
        "status": "new",
        "difficulty": "medium",
        "score": 10,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the time complexity of accessing an element in an array?",
                "answers": ["O(1)", "O(n)", "O(log n)", "O(n^2)"],
                "correct_answer": "O(1)",
                "explanation": "Array elements can be accessed directly by index, which takes constant time, O(1).",
            },
            {
                "question": "Which of the following is true for a binary heap?",
                "answers": [
                    "It is a complete binary tree",
                    "It is a balanced binary search tree",
                    "It allows random access to elements",
                    "It is not a complete binary tree",
                ],
                "correct_answer": "It is a complete binary tree",
                "explanation": "A binary heap is a complete binary tree, meaning all levels are fully filled except possibly the last level, which is filled from left to right.",
            },
            {
                "question": "What is the main disadvantage of a doubly linked list compared to a singly linked list?",
                "answers": [
                    "It uses more memory due to extra pointers",
                    "It is slower to search",
                    "It cannot be traversed backward",
                    "It is less efficient for deletion",
                ],
                "correct_answer": "It uses more memory due to extra pointers",
                "explanation": "In a doubly linked list, each node contains two pointers, one for the next node and one for the previous, which increases memory usage.",
            },
            {
                "question": "Which data structure is typically used for breadth-first search (BFS) in graph traversal?",
                "answers": ["Stack", "Queue", "Array", "Linked List"],
                "correct_answer": "Queue",
                "explanation": "BFS uses a queue to explore all the nodes at the present depth before moving on to the nodes at the next depth level.",
            },
        ],
    },
    {
        "id": "19",
        "module_id": "10",
        "name": "Introduction to Computing: Recursion and Backtracking - Quiz 1",
        "status": "new",
        "difficulty": "easy",
        "score": 1.0,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the base case in a recursive function?",
                "answers": [
                    "The condition that stops the recursion",
                    "The recursive call that leads to the base case",
                    "The case that calls the function again",
                    "The final output of the function",
                ],
                "correct_answer": "The condition that stops the recursion",
                "explanation": "The base case is the condition under which the recursive function stops calling itself.",
            },
            {
                "question": "Which of the following problems can be solved using backtracking?",
                "answers": [
                    "Finding the shortest path in a graph",
                    "Solving the N-Queens problem",
                    "Sorting a list of numbers",
                    "Searching a sorted list",
                ],
                "correct_answer": "Solving the N-Queens problem",
                "explanation": "Backtracking is useful for solving problems that involve making decisions at each step, such as the N-Queens problem.",
            },
            {
                "question": "What happens if a recursive function does not have a base case?",
                "answers": [
                    "The program will stop",
                    "The function will cause a stack overflow",
                    "The recursion will continue indefinitely",
                    "The function will throw an error",
                ],
                "correct_answer": "The function will cause a stack overflow",
                "explanation": "Without a base case, a recursive function will continue to call itself indefinitely, eventually leading to a stack overflow.",
            },
            {
                "question": "Which of the following is a characteristic of recursive algorithms?",
                "answers": [
                    "They require less memory than iterative algorithms",
                    "They solve problems by breaking them into smaller subproblems",
                    "They are always faster than iterative algorithms",
                    "They are simpler to write but more complex to understand",
                ],
                "correct_answer": "They solve problems by breaking them into smaller subproblems",
                "explanation": "Recursive algorithms divide problems into smaller subproblems and solve them by calling the same function with smaller inputs.",
            },
        ],
    },
    {
        "id": "20",
        "module_id": "10",
        "name": "Introduction to Computing: Recursion and Backtracking - Quiz 2",
        "status": "new",
        "difficulty": "medium",
        "score": 9.4,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the time complexity of a recursive function with O(n) calls, each taking O(1) time?",
                "answers": ["O(n)", "O(n^2)", "O(log n)", "O(1)"],
                "correct_answer": "O(n)",
                "explanation": "The time complexity of a recursive function depends on the number of calls and the time taken for each call. O(n) calls with O(1) time results in O(n) time complexity.",
            },
            {
                "question": "Which of the following is true about the backtracking algorithm?",
                "answers": [
                    "It solves problems by iterating through all possible solutions",
                    "It makes decisions recursively and undoes them if they are not optimal",
                    "It is a greedy algorithm",
                    "It always leads to the optimal solution",
                ],
                "correct_answer": "It makes decisions recursively and undoes them if they are not optimal",
                "explanation": "Backtracking makes decisions recursively, but undoes (backtracks) them if the current path doesn't lead to a solution.",
            },
            {
                "question": "Which problem is commonly solved using recursion?",
                "answers": ["Binary Search", "Merge Sort", "Factorial Calculation", "All of the above"],
                "correct_answer": "All of the above",
                "explanation": "All of the listed problems can be solved using recursion, where each problem is broken down into smaller subproblems.",
            },
            {
                "question": "Which of the following describes the divide-and-conquer approach used in recursion?",
                "answers": [
                    "Dividing the problem into two or more subproblems of the same type",
                    "Solving the problem by brute force",
                    "Dividing the problem into unrelated subproblems",
                    "Avoiding recursion by using loops",
                ],
                "correct_answer": "Dividing the problem into two or more subproblems of the same type",
                "explanation": "Divide-and-conquer involves breaking a problem into smaller subproblems that are easier to solve and then combining their results.",
            },
        ],
    },
    {
        "id": "21",
        "module_id": "11",
        "name": "quiz1",
        "status": "new",
        "difficulty": "easy",
        "score": 7.8,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the negation of the statement 'If p then q'?",
                "answers": ["p ∧ ¬q", "¬p ∧ q", "¬(p → q)", "p ∨ q"],
                "correct_answer": "p ∧ ¬q",
                "explanation": "The negation of 'If p then q' is 'p ∧ ¬q', which is the converse of the original implication.",
            },
            {
                "question": "Which of the following is a valid set operation?",
                "answers": ["Union ( ∪ )", "Differential ( ∆ )", "Intersection ( ⊕ )", "Subset ( ⊂⊂ )"],
                "correct_answer": "Union ( ∪ )",
                "explanation": "The union of two sets A and B, written as A ∪ B, contains all elements from both A and B.",
            },
            {
                "question": "What is the time complexity of a binary search algorithm in a sorted array of n elements?",
                "answers": ["O(n)", "O(log n)", "O(n^2)", "O(1)"],
                "correct_answer": "O(log n)",
                "explanation": "Binary search divides the array into two halves each time, reducing the search space logarithmically.",
            },
            {
                "question": "Which of the following is the correct definition of a function?",
                "answers": [
                    "A relation where every element in the domain is related to one and only one element in the codomain",
                    "A set of ordered pairs",
                    "A mapping from one set to another set",
                    "A set of rules",
                ],
                "correct_answer": "A relation where every element in the domain is related to one and only one element in the codomain",
                "explanation": "A function is a specific type of relation where each element of the domain corresponds to exactly one element in the codomain.",
            },
        ],
    },
    {
        "id": "22",
        "module_id": "11",
        "name": "quiz2",
        "status": "new",
        "difficulty": "easy",
        "score": 5.3,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following best describes an algorithm?",
                "answers": [
                    "A set of instructions that produce a desired output",
                    "A mathematical theorem",
                    "A collection of functions",
                    "A random process",
                ],
                "correct_answer": "A set of instructions that produce a desired output",
                "explanation": "An algorithm is a finite set of well-defined rules or steps that provide a solution to a problem.",
            },
            {
                "question": "What is the Cartesian product of two sets A = {1, 2} and B = {a, b}?",
                "answers": [
                    "{(1, a), (2, b)}",
                    "{(1, b), (2, a)}",
                    "{(1, a), (1, b), (2, a), (2, b)}",
                    "{(1, b), (2, b)}",
                ],
                "correct_answer": "{(1, a), (1, b), (2, a), (2, b)}",
                "explanation": "The Cartesian product of two sets A and B is the set of all ordered pairs (a, b) where a is an element of A and b is an element of B.",
            },
            {
                "question": "Which of the following is a property of a relation to be an equivalence relation?",
                "answers": [
                    "Reflexive, symmetric, and transitive",
                    "Symmetric, antisymmetric, and transitive",
                    "Reflexive, symmetric, and antisymmetric",
                    "Transitive, irreflexive, and symmetric",
                ],
                "correct_answer": "Reflexive, symmetric, and transitive",
                "explanation": "An equivalence relation must satisfy three properties: reflexive, symmetric, and transitive.",
            },
            {
                "question": "Which type of loop is commonly used to repeat an action a specific number of times?",
                "answers": ["While loop", "For loop", "Do-while loop", "Infinite loop"],
                "correct_answer": "For loop",
                "explanation": "A for loop is typically used when the number of iterations is known beforehand, making it ideal for repeated actions a specific number of times.",
            },
        ],
    },
    {
        "id": "23",
        "module_id": "12",
        "name": "quiz1",
        "status": "new",
        "difficulty": "easy",
        "score": 7.3,
        "max_score": 10.0,
        "questions": [
            {
                "question": "What is the truth table for the AND ( ∧ ) operation?",
                "answers": [
                    "True if both operands are true",
                    "True if at least one operand is true",
                    "True if both operands are false",
                    "True if neither operand is true",
                ],
                "correct_answer": "True if both operands are true",
                "explanation": "The AND operation returns true only if both operands are true.",
            },
            {
                "question": "Which of the following is an example of a well-formed formula (WFF) in propositional logic?",
                "answers": ["(p ∧ q) ∨ r", "(p ∨ q ∧ r", "p ∧ (q ∨)", "p ∨ q"],
                "correct_answer": "(p ∧ q) ∨ r",
                "explanation": "A well-formed formula (WFF) follows the syntactical rules of logic. The expression '(p ∧ q) ∨ r' is a correct WFF.",
            },
            {
                "question": "What is the cardinality of the set {a, b, c, d}?",
                "answers": ["3", "4", "5", "2"],
                "correct_answer": "4",
                "explanation": "The cardinality of a set is the number of elements in the set. The set {a, b, c, d} has four elements.",
            },
            {
                "question": "What does the Big O notation O(n^2) indicate?",
                "answers": [
                    "Linear time complexity",
                    "Exponential time complexity",
                    "Quadratic time complexity",
                    "Constant time complexity",
                ],
                "correct_answer": "Quadratic time complexity",
                "explanation": "O(n^2) indicates that the time complexity of an algorithm grows quadratically with the size of the input.",
            },
        ],
    },
    {
        "id": "24",
        "module_id": "12",
        "name": "quiz2",
        "status": "new",
        "difficulty": "easy",
        "score": 0.0,
        "max_score": 10.0,
        "questions": [
            {
                "question": "Which of the following is an example of a permutation?",
                "answers": ["123", "12, 13, 23", "A, B, C", "123, 132, 213"],
                "correct_answer": "123, 132, 213",
                "explanation": "A permutation involves rearranging elements in all possible orders. The example '123, 132, 213' shows different permutations of the numbers.",
            },
            {
                "question": "Which of the following is the correct definition of a bijection?",
                "answers": [
                    "A function where each element of the domain maps to one and only one element of the codomain, and vice versa",
                    "A function where every element in the domain has multiple images",
                    "A function that maps elements from one set to another set",
                    "A function that is not surjective",
                ],
                "correct_answer": "A function where each element of the domain maps to one and only one element of the codomain, and vice versa",
                "explanation": "A bijection is a function that is both injective (one-to-one) and surjective (onto), meaning there is a one-to-one correspondence between elements in the domain and codomain.",
            },
            {
                "question": "What is the purpose of the 'break' statement in a loop?",
                "answers": [
                    "To stop the loop and exit immediately",
                    "To skip the current iteration and move to the next one",
                    "To change the loop's termination condition",
                    "To reset the loop counter",
                ],
                "correct_answer": "To stop the loop and exit immediately",
                "explanation": "'break' is used to exit a loop immediately, regardless of the loop's termination condition.",
            },
            {
                "question": "Which of the following best describes a graph in discrete mathematics?",
                "answers": [
                    "A set of nodes connected by edges",
                    "A set of nodes only",
                    "A set of nodes with random connections",
                    "A linear sequence of nodes",
                ],
                "correct_answer": "A set of nodes connected by edges",
                "explanation": "A graph consists of a set of vertices (nodes) connected by edges (links). It is a basic structure in discrete mathematics.",
            },
        ],
    },
]
